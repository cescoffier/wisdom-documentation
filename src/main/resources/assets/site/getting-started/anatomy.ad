:icons: font
:sectanchors: true
:numbered: true
:imagesdir: /assets/images/

= Anatomy of a Wisdom application

[quote, Aristotle]
Knowing yourself is the beginning of all wisdom.


== The standard application layout

Wisdom is based on Apache Maven, and so follows Maven conventions. It is standardized and well understood. So it keeps
 things simple.

[listing]
pom.xml                  → The Maven project description
src                      → Application sources
 └ main
    └ java                  → The application Java sources (controllers, services...)
    └ resources             → The application resources, embedded within the application
       └ assets             → The assets used by the application, such as images, Javascript, CSS...
       └ templates          → The templates used by the application
    └ assets                → The assets that are not packaged with the application (see below)
    └ templates             → The templates that are not packaged with the application (see below)
    └ conf                  → Configurations files
       └ application.conf   → Main configuration file
 └ test
    └ java                  → The test classes
    └ resources             → The test resources
target                      → Generated stuff (output)
 └ classes                  → The compiled classes
 └ wisdom                   → The generated Wisdom distribution
   └ bin                    → The Wisdom binaries
   └ core                   → The core bundles
   └ runtime                → The Wisdom runtime bundles
   └ application            → Your application and its dependencies
   └ logs                   → The logs
   └ conf                   → The configuration files (copied from src/main/conf)
   └ templates              → The 'external' templates
   └ assets                 → The 'external' assets


== Within the application vs. within the distribution

As you may have seen in the list of directories above, Wisdom makes the distinction between templates and assets
packaged within the application and within the distribution.

The application is packaged as a Jar file. This package contains all classes from `src/main/java`, resources from
`src/main/resource` (internal templates and internal assets). This Jar file is an OSGi bundle, but you don't have to
worry about that.

image::/assets/images/package.png[Wisdom Applications are just Jar files,200, 200, align="center"]

Such jars are the unit of modularity of Wisdom, so complex applications can be composed by several of
 these jars. Wisdom makes this type of composition very easy, so your application looks like:

image::/assets/images/modular-app.png[Composing application is made easy, 300, 300, align="center"]

Ok, but what about application vs. distribution ?

The distribution contains everything to run your application. It's a standalone version of the application.

image::/assets/images/distribution.png[Wisdom distribution are standalone, 500, 500, align="center"]

So, the distribution contains your application, as well as external resources. Such resources are made available to all
applications, and overrides internal resources. This allows you:

* to update the stylesheets, resources or template without having to modify the application,
* to provide resources without having to package them.

So, to summarized:

1. Everything from the +src/main/resources+ are put inside the application package.
2. +src/main/assets+ and +src/main/templates+ are put in the distribution.


== Directories packaged within the application

The +src/main/java+ contains all the Java classes. Controllers, components, helper classes, even Java entities are
there.

The +src/main/resources/assets+ contains all the resources put inside the application package. Assets contains images,
JavaScript and CoffeeScript files, CSS and Less files... We recommend that you organize your directory using three
directories:

[listing]
assets
 └ images                       → Images
 └ js                           → JavaScript, CoffeeScript...
 └ stylesheets                  → CSS, Less...

The +src/main/resources/templates+ contains template files. Wisdom provides, by default, the Thymeleaf template
engine. So templates have generally the `.thl.html` file.

== Directories packaged within the distribution

The +src/main/assets+ contains all the resources put in the +assets+ directory of the distribution. Assets contains
images, JavaScript and CoffeeScript files, CSS and Less files... We recommend that you organize your directory using three
directories:

[listing]
assets
 └ images                       → Images
 └ js                           → JavaScript, CoffeeScript...
 └ stylesheets                  → CSS, Less...

The +src/main/templates+ contains template files going to the +templates+ directory of the distribution. Wisdom
provides, by default, the Thymeleaf template engine. So templates have generally the `.thl.html` file.

== src/main/configuration

The configuration directory contains the main application configuration. It lets you configure the different aspects of
 your application:

* +application.conf+ : the main application configuration
* +logger.xml+ (optional) : the logger configuration (LogBack)
* +chameleon.properties+ (optional) : the configuration of the OSGi platform
* +system.properties+ (optional) : properties loaded as system properties

All these files are going to the +conf+ directory of the distribution.

== The pom file

The +pom.xml+ file describes the project. It's the file read by Apache Maven and driving the build system.

== The target directory

The target directory contains everything generated by the build system. In addition contains the built  distribution
in the +target/wisdom+ directory.

== Typical .gitignore file
[subs="none"]
<p><a class="btn btn-primary btn-lg pull-right" href="/learn/getting-started/build.html" role="button"><i class="fa
fa-play"></i></a></p>
Because Wisdom does not pollute the +src+ directory and the base directory, the typical addition to the .gitignore file is just:

[listing]
target

